I"o5<hr />

<h4 id="摘要">摘要</h4>

<p>BloomFilter提供了一种判断一个值是否存在于指定集合的方法。在一个数据量较低的场景下，将数据保存到Hashset，然后利用hash检索某个值是否存在，但是在一个非常大的数据集中，传统的方法会消耗大量的内存，这导致OOM问题。BloomFilter的思路是，将一个value经过多次不同的hash映射到一个有限长度的bit数组中。当检测某个值是否存在的时候，只需要使用相同的hash检测,在bit数组中同时存在，则证明value大概率出现在集合中。如果有任何一次hash的index在bit map中被标记为0（代表无效），则证明value 一定不出现在该集合中。</p>

<p>之所以出现这个原因（大概率出现），是因为A和B两个value经过多次hash后，可能同时将bit map中相同的index标记为1。
使用bloomFilter可以节省大量的内存，在很多对结果要求并不很严格的场景下，bloomFilter是高效的。</p>

<hr />
<p>核心实现的代码如下</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BloomFilter</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MAX_HASH_COUNT</span><span class="o">=</span><span class="mi">3</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">map</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BloomFilter</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">size</span><span class="o">=</span><span class="n">size</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">map</span><span class="o">=</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">map</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">String</span> <span class="n">e</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="no">MAX_HASH_COUNT</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">index</span><span class="o">=</span><span class="n">hashCodeGroup</span><span class="o">(</span><span class="n">e</span><span class="o">,</span><span class="n">i</span><span class="o">);</span>
            <span class="n">map</span><span class="o">[</span><span class="n">index</span><span class="o">]=(</span><span class="kt">byte</span><span class="o">)</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isExists</span><span class="o">(</span><span class="nc">String</span> <span class="n">e</span><span class="o">){</span>

        <span class="kt">int</span> <span class="n">checkPoint</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="no">MAX_HASH_COUNT</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">hashCodeGroup</span><span class="o">(</span><span class="n">e</span><span class="o">,</span><span class="n">i</span><span class="o">)]==</span><span class="mi">1</span><span class="o">){</span>
                <span class="n">checkPoint</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">checkPoint</span><span class="o">==</span><span class="no">MAX_HASH_COUNT</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">hashCodeGroup</span><span class="o">(</span><span class="nc">String</span> <span class="n">e</span><span class="o">,</span><span class="kt">int</span> <span class="n">loopIndex</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="k">switch</span> <span class="o">(</span><span class="n">loopIndex</span><span class="o">){</span>
            <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
                <span class="k">return</span> <span class="nf">hashCode1</span><span class="o">(</span><span class="n">e</span><span class="o">)%</span> <span class="k">this</span><span class="o">.</span><span class="na">size</span><span class="o">;</span>
            <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
                <span class="k">return</span> <span class="nf">hashCode2</span><span class="o">(</span><span class="n">e</span><span class="o">)%</span> <span class="k">this</span><span class="o">.</span><span class="na">size</span><span class="o">;</span>
            <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
                <span class="k">return</span> <span class="nf">hashCode3</span><span class="o">(</span><span class="n">e</span><span class="o">)%</span> <span class="k">this</span><span class="o">.</span><span class="na">size</span><span class="o">;</span>
            <span class="k">default</span><span class="o">:</span>
                <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">hashCode1</span><span class="o">(</span><span class="nc">String</span> <span class="n">data</span><span class="o">){</span>

        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">data</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">hash</span> <span class="o">=</span> <span class="mi">33</span> <span class="o">*</span> <span class="n">hash</span> <span class="o">+</span> <span class="n">data</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">hash</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">hashCode2</span><span class="o">(</span><span class="nc">String</span> <span class="n">data</span><span class="o">){</span>
        <span class="kd">final</span> <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">16777619</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="mi">2166136261L</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">data</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="n">hash</span> <span class="o">^</span> <span class="n">data</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">))</span> <span class="o">*</span> <span class="n">p</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">hash</span> <span class="o">+=</span> <span class="n">hash</span> <span class="o">&lt;&lt;</span> <span class="mi">13</span><span class="o">;</span>
        <span class="n">hash</span> <span class="o">^=</span> <span class="n">hash</span> <span class="o">&gt;&gt;</span> <span class="mi">7</span><span class="o">;</span>
        <span class="n">hash</span> <span class="o">+=</span> <span class="n">hash</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="o">;</span>
        <span class="n">hash</span> <span class="o">^=</span> <span class="n">hash</span> <span class="o">&gt;&gt;</span> <span class="mi">17</span><span class="o">;</span>
        <span class="n">hash</span> <span class="o">+=</span> <span class="n">hash</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="o">;</span>
        <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">hash</span><span class="o">);</span>

    <span class="o">}</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">hashCode3</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">i</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">hash</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">key</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">hash</span> <span class="o">+=</span> <span class="n">key</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="n">hash</span> <span class="o">+=</span> <span class="o">(</span><span class="n">hash</span> <span class="o">&lt;&lt;</span> <span class="mi">10</span><span class="o">);</span>
            <span class="n">hash</span> <span class="o">^=</span> <span class="o">(</span><span class="n">hash</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">hash</span> <span class="o">+=</span> <span class="o">(</span><span class="n">hash</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="o">);</span>
        <span class="n">hash</span> <span class="o">^=</span> <span class="o">(</span><span class="n">hash</span> <span class="o">&gt;&gt;</span> <span class="mi">11</span><span class="o">);</span>
        <span class="n">hash</span> <span class="o">+=</span> <span class="o">(</span><span class="n">hash</span> <span class="o">&lt;&lt;</span> <span class="mi">15</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">hash</span><span class="o">);</span>
    <span class="o">}</span>


<span class="o">}</span>

</code></pre></div></div>

<p>BloomFilter 的准确率取决于size和hash次数，以及好的Hash函数选择。  在防止缓存击穿这类问题上，可以使用Bloomfilter。</p>

:ET