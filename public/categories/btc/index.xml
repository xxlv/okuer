<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>btc on Okuer</title>
    <link>https://blog.okuer.com/categories/btc/</link>
    <description>Recent content in btc on Okuer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 23 Dec 2019 21:05:39 +0000</lastBuildDate><atom:link href="https://blog.okuer.com/categories/btc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>http2.0</title>
      <link>https://blog.okuer.com/posts/2019/2019-10-23-http2/</link>
      <pubDate>Mon, 23 Dec 2019 21:05:39 +0000</pubDate>
      
      <guid>https://blog.okuer.com/posts/2019/2019-10-23-http2/</guid>
      <description>Http/2 Link to heading HTTP2 协议起源于SPDY，目的是解决http1.x 如下的问题：
plantext 文本协议的size开销 不支持复用tcp通道 请求通道上限 队首阻塞 http1.1 Keep alive 来保证复用一个tcp连接，但严格要求响应的顺序，响应是一个队列，如果遇到队首阻塞，则整个tcp通道就无法处理别的请求了。 http/2如果解决这些问题的？
通道复用 二进制帧层 服务端push 设置请求优先级 压缩（HPACK） 帧布局 Link to heading +-----------------------------------------------+ | Length (24) | +---------------+---------------+---------------+ | Type (8) | Flags (8) | +-+-------------+---------------+-------------------------------+ |R| Stream Identifier (31) | +=+=============================================================+ | Frame Payload (0...) ... +---------------------------------------------------------------+ 帧头为固定的9个字节（(24+8+8+1+31)/8=9）呈现，变化的为帧的负载(payload)，负载内容是由帧类型（Type）定义。
帧长度Length：无符号的自然数，24个比特表示，仅表示帧负载所占用字节数，不包括帧头所占用的9个字节。默认大小区间为为0~16,384(2^14)，一旦超过默认最大值2^14(16384)，发送方将不再允许发送，除非接收到接收方定义的SETTINGS_MAX_FRAME_SIZE（一般此值区间为2^14 ~ 2^24）值的通知。 帧类型Type：8个比特表示，定义了帧负载的具体格式和帧的语义，HTTP/2规范定义了10个帧类型，这里不包括实验类型帧和扩展类型帧 帧的标志位Flags：8个比特表示，服务于具体帧类型，默认值为0x0。有一个小技巧需要注意，一般来讲，8个比特可以容纳8个不同的标志，比如，PADDED值为0x8，二进制表示为00001000；END_HEADERS值为0x4，二进制表示为00000100；END_STREAM值为0X1，二进制为00000001。可以同时在一个字节中传达三种标志位，二进制表示为00001101，即0x13。因此，后面的帧结构中，标志位一般会使用8个比特表示，若某位不确定，使用问号?替代，表示此处可能会被设置标志位 帧保留比特为R：在HTTP/2语境下为保留的比特位，固定值为0X0 流标识符Stream Identifier：无符号的31比特表示无符号自然数。0x0值表示为帧仅作用于连接，不隶属于单独的流。 （参考：http://www.blogjava.net/yongboy/archive/2015/03/20/423655.html）
帧类型： Link to heading HEADERS：帧仅包含 HTTP 标头信息。</description>
    </item>
    
    <item>
      <title>生成比特币地址</title>
      <link>https://blog.okuer.com/posts/2019/2019-10-02-build-your-btc-address/</link>
      <pubDate>Mon, 23 Dec 2019 21:05:39 +0000</pubDate>
      
      <guid>https://blog.okuer.com/posts/2019/2019-10-02-build-your-btc-address/</guid>
      <description>安全离线生成比特币的钱包地址 Link to heading 比特币是数字资产，受到密码学（密钥对）保护，一旦你的私钥被公开，你的资产将不在安全。传统的账号/密码受到服务提供商的保护，比如在支付宝，你的账号账号被盗，导致的财产损失，会被支付宝保险赔付。因为有一个第三方信任机构（保险/支付宝）。但是比特币是构建在区块链上的，区块链是去中心化的。这意味着没有一个类似支付宝的角色来保证你的财产安全，一切都要靠自己。 目前，有许多在线生成比特币地址的服务，这些服务大大简化了生成步骤，但同时引入了非常大的分析。一旦你的账号在网络环境被生成，它有极可能被泄漏。泄漏途径有许多，如本地机器被黑客入侵、服务提供商私自保存了密钥。 因此，如果资产金额较大，强烈建议使用本地的脚本自己生成密钥对，并且永远不要在联网的环境下暴露私钥。 本文提供一种简单的离线脚本，一步步的带你生成比特币的密钥对。（本文所有脚本均在这里，https://github.com/xxlv/btc-address-gen-scripts.git）
第一，初始化依赖 Link to heading 你需要安全python环境，同时引入包
sudo pip install bitcoin sudo pip install ecdsa 第二步，拔掉网线或者断开wifi Link to heading 非常重要的步骤，如果不是测试，一定要做！！！
第三步，运行脚本，生成密钥对 Link to heading python key-to-address-ecc-example.py 生成的结果如下： Link to heading Private Key (hex) is: 14962ffc7f1c9dba79aadb608cd7088574e41a418a5349004309b722a9051b90 Private Key (decimal) is: 9311615220753377728968374325829133502017354028737325199749815733352682298256 Private Key (WIF) is: 5HyMSVcZMnBeGEoFbPqRaPHK1xVpHj6yCGnC4bvqxRUm72uuvbx Private Key Compressed (hex) is: 14962ffc7f1c9dba79aadb608cd7088574e41a418a5349004309b722a9051b9001 Private Key (WIF-Compressed) is: 2SdMjLGhnybsEFJmA85WrTioEtQAaKc8PQjeMQRFd5Q6AKdxygTY5D Public Key (x,y) coordinates is: (32009024601293775410666277862003376881148118697205564723468898850638045984780, 64137136342866323469645354187456635120169454941786517702226349133247186720277) Public Key (hex) is: 0446c477454946ee7187a0b859cedf3c4799726b5d8921b22b6b366b97178d380c8dcc552e1ab8546673dcbfa05f3aa97e33df950f2020805b11e4d8489fdfd615 Compressed Public Key (hex) is: 0346c477454946ee7187a0b859cedf3c4799726b5d8921b22b6b366b97178d380c Bitcoin Address (b58check) is: 18HWNXDVj1jSz9syiJpo2YcEofympTLQgC Compressed Bitcoin Address (b58check) is: 1HViUwJwUofaAPKbnzNRXHqqRE6UQE7g5B 每个人的机器每次调用生成的都不是相同的。 这是btc账号的全部信息，建议冷藏。</description>
    </item>
    
  </channel>
</rss>
