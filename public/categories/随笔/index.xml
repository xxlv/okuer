<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>随笔 on Okuer</title>
    <link>https://blog.okuer.com/categories/%E9%9A%8F%E7%AC%94/</link>
    <description>Recent content in 随笔 on Okuer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 22 Feb 2018 21:05:39 +0000</lastBuildDate><atom:link href="https://blog.okuer.com/categories/%E9%9A%8F%E7%AC%94/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2018年终总结</title>
      <link>https://blog.okuer.com/posts/2018/2018-02-22-2018-nianzhongzongjie/</link>
      <pubDate>Thu, 22 Feb 2018 21:05:39 +0000</pubDate>
      
      <guid>https://blog.okuer.com/posts/2018/2018-02-22-2018-nianzhongzongjie/</guid>
      <description>现在是2018年初，准确的讲是2018年2月22日，一切都还是空白。我现在脑袋里思考我今年做了些什么，就像是我在2019年回想去年那样。这种思绪能让我冷静下来，思考这一年我的成长。
是的，不出意外的话，我今年加入了一家区块链的创业公司。我非常喜欢这份工作，并且能够产生源源不断的热情。 我在这家公司迅速的成长，这一年对我而言非常重要。
我在2018年的7月份将拿到驾照。真实激动人心的时刻。
我会完成一本书，这是我一直的愿望，我将会在9月份的时候，真正的完成它。这是一本技术书籍，关于区块链的。我会学会如何从0开始写一本书。它将会出版。
我会拥有几个新朋友，我们拥有相似的价值观。我们会一起聊聊互联网。当然，我也会重建我的友谊，跟之前的老朋友。
我的英文得到了飞升，我快速的通过了英文4级，并且在10月前，走过至少3个不是杭州的城市。
在10月，我摘掉了牙套，我将永远忘不掉在诊所离开的那个下午。那天我骑着单车，耳机里听着adele的hello，飞快的穿过打铁关的地铁口。
2018年，我一直在坚持的健身计划，终于令我的人生发生了变化，我拥有了极好的食欲并在2018年8月认识了我的女朋友。
她是一个乐观可爱的女孩子，我们有说不完的话题，偶然谈到哲学。并且彼此深信就是命中注定的那个人。
我会准备一件礼物送给即将大四毕业的弟弟。我肯定会爬一座山，在一个风和日丽的下午。我站在山顶，眺望远方。
我的星际水平会达到国服大师，为此我付出了许多努力，经常一个人练习战术。
到年底，我将有20W的现金，这些钱一部分将给爸妈，剩下的钱会用来投资。我会庆幸我买个月花费了1%来购买ETH。
我变得更高，睡眠质量有了非常高的提升，并且在右脚上做了微型手术。
啊对了，我遇见了迪丽热巴，在一个发布会上，我遇见了她，并索要了签名。
这是丰富的一年呢。
我每周都会坚持读一本书，这种阅读给我非常大的视野提升。我研究了许多经济学的东西，以至于我已经宛若一个投资家，并且开始打理家庭财务。为此，我在5月份，建立了专门的家庭账户用以理财。
这是我在2018年做的事情，每一天都充满了变化。
现在是2018年2月22日，我并不知道这一切会朝着那个方向发生。</description>
    </item>
    
    <item>
      <title>未来</title>
      <link>https://blog.okuer.com/posts/2018/2018-01-20-weilai/</link>
      <pubDate>Sat, 20 Jan 2018 21:05:39 +0000</pubDate>
      
      <guid>https://blog.okuer.com/posts/2018/2018-01-20-weilai/</guid>
      <description>我不止一次的思考，未来是什么？就在我思考的瞬间，未来已经呼啸而过，我没办法用一个相机把它定格住，研究它，解剖它。 我也不止一次的思考，究竟是什么影响了即将发生的事件，又是什么使得发生的事件看上去如此合理。如果一个人来自未来，他会是一个严谨的逻辑学家，他会说出事件发生的因果关系，听众将对此深信不疑。即便是看上去事件的本身荒诞不可思议。
很多人都过去发生了什么都一无所知，所以当他对未来做出判断和决策的时候，往往像是一个赌徒，通过概率来判断。或是因为事件惯性，即人们总是在找到一个方向，使得发生的意外更小，发生的事件将更小的影响现在。一个上学的初中生当知道转角处有一摊水的时候，他每次都会很小心的避开。当他发现一条去往食堂的捷径，如果这条路使得更舒服，他便很难在选择别的路径。
未来亦是如此，当我们选择了一个方向，如果没有不可控的意外介入，我们便很难有动力去改变。
当每个人都试图维持某种稳定的时候，瞬息万变的未来将存在一个可预测的解空间。发生的事件将可以被预测，这是关于未来的全部秘密。
互联网发展的历史可预测的痕迹尤其明显。
信息传递，这是人类生活甚至动物生活中必不可少的的一环，通过传递信息，动物可以避开危险、分享食物、交流经验和学习。信息传递从原始到现代经历了许许多多的变化，从气味、声音到编码的信息如刻在石头上和柱子上的文字、再到电子显示屏。 信息的传递越来越高效，并且越来越多元化。PC时代，信息从浏览器出发，一个个超链接，将所有的信息都组织在一起，任何人都可以获取信息用以改善自己。比如学习烹饪和钢琴。
伴随而来的信息分享，使技术得到了飞跃。更便利的工具出现了，移动互联网使互联网普及到了每一个人的手掌之中。
信息的传递变得更方便，你只需要在手掌上操作即可。
我们对信息的获取已经抵达了一个数量级，大量的数据由大脑进行分拣显然并不是长久之计，人工智能将基于统计学模型来优化数据，让你获取到最需要的信息。得益于这一点，我们将会拥有更智能的信息推送，甚至在你寻找信息之前，信息将出现在你最需要的那一刻。 你获取过的全部信息可以预测你接下来需要什么信息。一个每天都会点肯德基的人，机器有理由相信在明天，这个事件仍旧会发生。
信息已经足够智能的出现在任何需要它的场合，信息本身已经涌现了智能。但伴随而来的是信任危机，当大量的数据涌入的时候，不被信任的数据将污染信息源，使机器做出错误的决策，这些决策将会导致一个个商业诈骗、腐败、独裁。尤其是信息被政府操控的时候，人民将难以获得自由。 人民拥有法律，却永久的失去了法律的解释权。
区块链将是解决这一问题的下一个革命性技术。
比起互联网，区块链将提供整个互联网的信任基石。只有在信任之上的智能，才有意义。 将人类的信任从中央权威转移到数学的时候，会有很大的风险。比如如何治理，失控后如何防范？
这些问题都将是未来会面对的问题。</description>
    </item>
    
    <item>
      <title>谜底</title>
      <link>https://blog.okuer.com/posts/2017/2017-11-06-midi/</link>
      <pubDate>Mon, 06 Nov 2017 21:05:39 +0000</pubDate>
      
      <guid>https://blog.okuer.com/posts/2017/2017-11-06-midi/</guid>
      <description>谜底
你一定会在这样的时候思念她。
当你忙碌地生活了一天又一天，在某个平凡的你以为又是跟昨天一样的早晨，跟往常一样去那家写着“又是美好一天”招牌的早餐店门口的时候，忽然有一个人的影像生生的插进了你的记忆。如此强烈，像是经历过猛烈的性后的黄昏，像是暴风雨或核弹光芒。 你开始怀疑自己，一定是记忆错乱了。可是，那个人的记忆是如此地真实，在你的每一天每一个小时的大脑记忆中央开始爆裂。你不能控制自己，感觉她是存在的，然而你一定想不起她的名字。你开始怅然若失，对每一天都错过她追悔莫及，却又无法得到她的任何信息。
你一定会经历这样的场景。 当你开始思考我说的问题的时候，她突然占据了你的大脑。那个名字，那个画面，捉住它，别让消失掉。因为一旦它消失了，在未来的许多日子里，你将永远得不到它的任何信息。
你会面临你的一生中最重要的问题，死亡。这是你必须接受的一个礼物。虽然你并不这样认为，直到最后一刻你都以为那是惩罚。就像是小时候做错事那样。那时候，你会躺在病床上，看着你不在瘦骨嶙峋的身体，病入膏肓后记忆却更加清晰，你清楚的看见你面前的两个孩子正望着你。 就像是你望着当初给与你生命的那个人一模一样的眼神。
请对他们微笑，并说，“这是一个谜，我现在要揭开它了”。
是的，你要接近一生中最重要的那个时刻了。你将获得一生中最宝贵的信息-关于死亡的信息。
你充满了期待，但期待转而变成了悔恨。悔恨又在一瞬间被充盈着激动的热泪淹没。那一刻，你回想起你的一生，在漫长的迷雾重重中一路走来的你的背景，你望着他，像是望着一个老友。 你多想拍拍他的肩膀，从帽子里掏出一只兔子丢在他的面前吓他一跳。
如果这样做了，你一定会想起她。那个伴你一生的重要的人，那个在你的记忆中丢失的灵魂。
当她走到你的面前，脱掉衣服，摘下面具的时候，你会惊愕地看见你自己。</description>
    </item>
    
    <item>
      <title>互绘的双手</title>
      <link>https://blog.okuer.com/posts/2021/2021-10-25-huhuideshuangshou/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.okuer.com/posts/2021/2021-10-25-huhuideshuangshou/</guid>
      <description>最近看到了著名画家埃舍尔的《互绘的双手》。引发了我对现实世界的一点思考。
图中一只手在画另一只手，而另一只手也在做同样的事情。
看到这幅画作的时候，我非常震撼，这幅画在描述了，在一种循环中，沿着任意一只手都找不到最终解。
这在现实生活中也有许多例子，比如蛋和鸡的关系。到底是先有鸡还是先有蛋，到底是左手先画了右手还是右手先画了左手？
这样的问题经常令人困顿。在计算机上，编译器可以自举。简单说明就是就是一种语言的编译器是它自己写的。
就像是一个人把自己 举 起一样。
很多年前我一直认为这更多的是一种哲学上的思想实验，并不会对现实世界产生任何影响。
实际上，我们的世界是一个复杂的系统，里面有无数个互绘双手的陷阱。一旦落入其中，就会麻烦缠身，似乎永远找不到 解。 比如一个创业者面临的困境： 需要创业就需要一笔启动资金，需要资金往往就需要先创业。 或者一个求职者， 需要找到一份工作，就需要5年的相关经验。 … 很多时候，当落入这样的陷进之中，就需要跳脱出来，在更高的纬度来审视目前的问题，这样才可能找到最终解。
比如互绘的双手，我们只需要将纬度上层一个层次，就知道，这两只手，都出自于画家之手。
了解到这点对我们的启发是：在面对人生难以抉择的时候，不妨上层一个纬度来审视问题。一只在井底的青蛙要学会在天空下俯视群山。 当然做到这一点并不容易。没有见过蓝天的人是没有办法想象天空的。 这似乎又是一个困局，你想要跳脱出去，就必须上升一个纬度。你要上升一个纬度，就必须要跳脱出去。 当然，打破这一个困境的，是思想。</description>
    </item>
    
    <item>
      <title>善用工具</title>
      <link>https://blog.okuer.com/posts/2021/2021-10-11-use-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.okuer.com/posts/2021/2021-10-11-use-tools/</guid>
      <description>学会使用Python Link to heading 你可能会问，我没有任何编程技术，我为什么要学习Python。我将学习python列为第一个需要掌握的工具，是因为它像是一个魔盒。你想要的一切都在里面。 它可以帮助你解决绝大多数复杂的事情，从简单的邮件批量回复到构建一套家庭灯光管理组件。使用Python绝对是一个不错的选择。尤其是对没有计算机经验的人而言。 因为它最容易去学习。学习Python不需要懂得编译原理，也不需要懂得词法分析，甚至模型、多线程、这些艰涩的名词在一开始都不需要去考虑。
C++/Java 这些语言可以做到Python做到的所有事，因为它们都是图灵完备的，但是它们太庞大了。
仅仅将它看作一个简单的盒子，你要用一些咒语去唤醒它。
利用Python（它本身是图灵完备的），你可以编写一个邮件群发器，也可以对一个excel进行批量的操作。 思考，你目前最大的痛点是什么？什么事情是你每个固定周期都要做的，但是又很繁琐？
场景 假如你每周都需要完成一份长长的周报，你每个周五的下午都要去回忆每一周都做了什么。 一个可能的解决方案是，你每天都在笔记上写下今日的计划，然后在周五的下午汇总在一起。 利用Python ，你可以这样做，
首先将选择一个 笔记本 ，来记录你每日的工作，这个 笔记本 可能来源于excel或者某个网站，假如你是运营，你也许在一周内处理来20个客户。他们在某个系统可以查询。 那么，这些是你的工作。也就是 笔记本 。这些说的 笔记本 是指信息源。 假如是你一个开发者，那么你提交到github的代码可以作为你的 笔记本 。
因此需要定义一系列 笔记本 ，在这个过程中其实你隐式的做了规划。然后，思考你每周的任务是否可以通过聚合这些 笔记本 在这一周所记录的细节来生成。
如果不行，那么尝试优化你的工作，比如养成习惯 每日的任务都 记录在特定的 笔记本 。 然后，你可以用Python来生成一份周报。你可以选择直接发送或者定时发送，甚至如果想，你可以先发送给你自己，修改后在提交。
管理时间 Link to heading GTD Link to heading GTD 是一门需要简单培训的时间管理技巧。它的核心是让你对事物做出优先级排序。我们在生活中经常面临各种事情，但是个人的时间是有限的。那么如何在有限的时间做出最有价值的事情。就需要GTD来管理。 简单而言，就是将事物按照 重要 程度和 紧急 程度来划分。
重要紧急 重要不紧急 紧急不重要 不紧急不重要 优先将时间分配给重要且紧急的事情，将不紧急不重要的事情放在一边。很多工具都能做到这一点。如果是技术向，强烈推荐 emacs 的 orgmode 来做gtd。
番茄工作法 Link to heading 番茄工作法的本质是保持专注的时间。我们在工作中经常被各种意外的事件打断。无间断的会议，突然的同事问候以及某个偶然的噪音。 为了更专注的工作，保持高效状态，可以用番茄工作法，将时间分为25分钟的片段。每个片段必须处于高度专注。比如关闭全部非必须通信软件，甚至网络，集中精力处理目前的单一事件。 将时间限制在25分钟是一个非常好的选择，当然也可以根据自身情况做微调。25分钟并不是一个很长的时间，因此要在25分钟内解决事情，就对你提出了挑战。需要迅速调动大脑。如</description>
    </item>
    
    <item>
      <title>基于大量信息的决策</title>
      <link>https://blog.okuer.com/posts/2017/2017-03-23-infomation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.okuer.com/posts/2017/2017-03-23-infomation/</guid>
      <description>阅读本文你将了解到
信息过载 获取有效信息 了解信息的获得难易程度，有些信息是全部人都可以免费获取的，有些是通过自己分析得到的。 隐藏的可能信息。有时候需要听听没说什么。 基于经验和随机策略来抵抗不可知或极难获得信息的潜在危险 这个世界上每一个时刻都产生大量的数据，这些数据可以被转换成各种各样的信息。在金融操作中，信息绝对是最敏感的杠杆。一条有价值的信息可以在决策中占有很大的权重。而一些无用的信息，大量消耗了你的资源和精力，却往往只是障眼法。并不会产生实际的收益。 我们的周围被大量的信息充斥，这些信息包含了促销广告、情人节优惠活动、午夜电影打折券、股灾、天气预告&amp;hellip;在这个数字驱动的时代，信息可以让你获取巨大的收益，但有害的信息往往是你走入歧途。
过滤信息显得尤为重要。信息的过滤意味着，你必须独立的思考，切勿随波逐流，但同样应该将思考的精力集中在某些特定的区域，而不要让其他部分分散注意。有些共识、前人的经验、专家的分析，可以直接获取结果而不需要自己在思考，因为思考可能在很大程度上获取到相似的信息。 但最难的在于，我们不知道那些经验可以直接来用，那些需要自己在去思考分析。有些经验是只能满足某个环境的，而有些则是上下文无关的（一般是知识）。
我们所处的世界，信息的获取成本很低，但也可能很昂贵。有些信息是共享的，如在互联网上，你可以搜索到几乎全部想要的共享信息。而有些信息则带了秘钥，它只是少部分人知道。信息的不对称导致了贫富差距。但往往，通过对获取到的信息分析，总能推测出那少数不可知的信息。 利用这些信息，可以在很大程度抵御来自信息不对称。而你根据大量的信息推测出隐藏的信息，需要很多知识和前面的经验。这些经验只能来自于你的经历、学习、读书和独立思考。
在对一条信息进行分析的时候，还有很重要的一点是，当信息被出现的时候，你的大脑中总是被信息描绘的画面占据，而往往忽视了信息没有传达的信息。当你意识到这条信息没有传达某种你预测中应该要传达的信息，此时必须警惕起来，为什么对方选择隐藏和避而不谈？
在股市中，有一种很有用的策略来抵抗信息的不对称。即对已知的信息采用经验分析获取价值，而对未知或极难知道的信息采用随机策略。在有些时候，这样的决策反而会获得更大的收益。</description>
    </item>
    
    <item>
      <title>密码学货币</title>
      <link>https://blog.okuer.com/posts/2017/2017-03-24-btc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.okuer.com/posts/2017/2017-03-24-btc/</guid>
      <description>阅读本文你将了解到
货币 区块链的原理 比特币如何解决拜占庭将军的问题&amp;amp;重复支付问题 密码学货币的前景展望 【货币】
让我们先闭上眼睛回到人类文明的早期阶段，想象一个猎人狩猎归来，他收获颇丰，在饱餐一顿后。他手里的鹿肉还有一大半。如果置之不理，一晚上就会腐烂。于是他相处一个好注意，用鹿肉来跟同伴交换兔肉。第一次交换进行的很顺利，他吃到了从未吃过的兔肉。并立即喜欢上了兔子的味道。于是开始频繁的交换。久而久之，他想要交换更多的东西，但他也发现了一个问题，不是所有的人都愿意用鹿肉来跟他交换，有人喜欢兔肉，于是他用鹿肉换来兔肉，再用兔肉来交换他喜爱的铃铛。 但这样的交换成本太高，而且并不总是幸运的交换到自己喜欢的东西，是不是存在一种东西，我们大家都愿意用自己手上的东西跟它交换呢？
没错，它就是货币。
货币的一个重要的特征就是流通。它建立在所有人都信任的基础上。并且货币应该是极难伪造的。 当货币在流通的时候，遇到的一个挑战是，如何防止货币被伪造。
因为总有人想要不劳而获，通过伪造货币来交换想要的东西，一旦货币的制造成本很低，那么，通货膨胀将慢慢的蚕食掉货币在流通中代表的那部分价值，最后变成一文不值的东西。同样没有完善的验证机制，每个人都可以私自制造货币，最终货币泛滥，再也没有人愿意用自己手里真真实实的大米来跟他交换了。所以，货币的另一个重要的特征就是，可以分辨真伪。
【密码学货币·BTC】
假设有一个账本，记录了 [张三持有1000W BCT] 这样的信息。大多数的参与者都认可这条信息，证明张三确实持有了1000W的现金。现在，我们的目的就是让绝大多数人都认可这个账本。
我们可以使用投票机制，假设有100台计算机都各自持有一个账本，其中51台计算机记录了[张三持有1000W BCT] 这样的信息，49台持有[李四 持有1000W BCT]这样的信息。那么，我们认为，张三拥有1000W BCT这条信息是合法的。这里有一个明显的漏洞，就是当有人控制了51台计算机，那么，他就可以篡改信息。（就是著名的拜占庭将军问题）。
现在，我们把所有的交易都想象成一个巨大的账本，这个账本记录了所有的历史交易。在最开始的时候，在这个账本上记录 [张三得到1000W BTC] 这条的信息。 现在大家都认同了这个账本。接下来，交易开始，张三持有了1000W。这个账本将自己的信息通过广播的形式发送到互联网，所有的其他客户端都接收到这个信息，并进行验证。验证成功后，将自己的账本更新为最新的。
每个客户端都想写入一笔交易到账本上，并且他要获得绝大多数客户端的认可。每个客户端都运行着一样的算法检测。当客户端获取到最近的交易信息的时候，他会运行一个hash函数。来证明自己的运算能力更快。证明方法是：
Hash(历史的交易信息+当前的最新交易+随机数）生成的Hash满足某个特定的条件，这个条件决定了获取这个Hash的难易程度，比如Hash的结果必须是00开头。
很明显，在这个Hash算法中，历史的交易信息和当前的最新交易，对于客户端来说都是共享的，他们都持有这样的信息，唯一不同的是，他们要在其他客户端算出满足条件的Hash之前算出它，并打上时间戳，广播出去。这样，就是一个区块。作为奖励，你可以在里面增加一条你拥有25BTC的记录。其他客户端在接收到你的广播后，会验证是否有效。而这样你就拥有了25个BTC（如果你私自改动这个值，其他客户端将会拒绝这个区块，并且这个值在每四年会减少一半）。但2140之后，打包区块将不会获得BTC。因为总量被设置了2100万个被分配完毕，收益只是交易创建者支付的手续费。
这里每个CPU都真实的付出了劳动（proof-of-work），它们消耗了电力和资源来产生一个满足要求的随机数。并没有任何投机取巧的办法能获得这个随机数，唯一的方案就是暴力遍历匹配。这个的灵感来自于Hashcash,它很难被找到但很容易被验证。所以，最快算出结果的那个客户端，就创建了一个区块。这个区块里包含了若干条交易记录。 比特币的区块大约每十分钟产生一个。截止目前，每个大小约1M的限制。
一旦A接收到来自B的广播，声称自己发现了新的满足要求的随机数，A就会进行验证，通过后，将新的区块连接到旧的区块上，并将这个消息广播出去。而连接若干个的区块形成一个链条。就是区块链。 当诚实的节点站绝大多数的时候，这个由于无数个计算机节点构成的P2P网络，是可以信任的。而每一台客户端都拥有一个完整的账本。
比特币本身代表了互联网架构下无数人构建起的、没有中央集权的信任网，这个信任不被任何政府和机构控制。所有的节点都扮演了监督的决策，每一笔交易都有迹可循。就像是对黄金的信任是因为黄金极难获得且难以伪造，比特币需要消耗大量的计算才能获得。然而，随着计算难度的加大，没有客户端愿意在于计算。
在解决重复支付的问题上，当一个比特币被重复支付的时候，那一条交易被接受取决于被最先加入到区块链上的区块包含了你的那一条交易信息。剩下的交易信息将会丢弃。
未来的支付场景多样化，密码学货币本身面临着巨大的机遇和挑战。一个威胁是加密算法将不在安全。可以肯定的一点是，任何人都无法停止它。它已经正在互联网这篇肥沃的土地上自由的野蛮生长了&amp;hellip;&amp;hellip;
References
(BTC 论文)[https://bitcoin.org/bitcoin.pdf]</description>
    </item>
    
    <item>
      <title>整洁架构之道思考</title>
      <link>https://blog.okuer.com/posts/2021/2021-11-01-arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.okuer.com/posts/2021/2021-11-01-arch/</guid>
      <description>Table of Contents Link to heading 整洁架构之道 编程范式 架构关心的是什么？ 可测试的程序 延迟选择的重要性 设计的边界 整洁架构之道 Link to heading 编程范式 Link to heading 从编程范式说起，有三种编程范式，结构化编程/面向对象编程/函数式编程。 这三种编程范式可以说是计算机编程的核心范式，任何软件开发都遵守这三种范式中的某几种。
结构化编程规定了我们使用if/else 来做条件判断执行代码，限制了在goto代码的使用。 从根本上保证了代码的可读性。可读性在计算机领域比性能更加重要，在很多的场合下，可以损失一部分性能，但一定不能损失可读性。 限制goto可以减少编程的复杂度。
面向对象编程范式，我们可以利用多态限制用户对函数指针的使用。函数的调用栈被移动到了堆区。 当然还有更多的好处，面向对象进一步增加了可读性。通过对象的沙盒包装将函数伪装成行为，就像是一个拥有许多函数的机器人。 我们观察它的行为，而不需要关注函数指针。
函数式编程对程序的赋值进行了限制，这意味着永远无法区改变一个存在的符号的值。 在今天的serviceless架构下，函数式编程天然的可以无所顾忌的跑在多个集群上，不需要担心任何东西。 它是无状态的。符号的值大多数情况下都没有办法改变。因此它是安全的。
编程范式并不代表者架构本身，架构是一个决策过程。 架构很像是建筑师在完成图纸的过程，想象一个优秀的建筑师，如果设计一幢漂亮的建筑物。他必须考虑的是建筑的风格是什么、高度如何、怎样抗震、采光率…
等等这些决策了他选择什么样子的可以落地的架构。在计算机里面架构也伴随着这样的考虑，如何高效率的开发、性能如何、扩展性怎样、是否能产生额外价值、以及能否扛住巨大的流量。
架构关心的是什么？ Link to heading 在计算机里面，重要的是可读性、扩展性以及健壮性。
计算机在执行二进制程序的时候是不关心可读性的，但在编程的时候，可读性往往高于一切。一个没有办法理解的系统，即便是它能很好的工作，但你敢使用么？
面向对象编程范式和结构化编程 在提升可读性上做出了重要的贡献。
架构需要对一些细节进行选择，比如选择采用何种数据库，就像是采用何种木材来制作一个凳子。这些都是细节，应该是架构无关的。
在架构设计的时候，这部分应该是容易替换的，插件式的。OCP原则说，一个设计良好的计算机系统应该在不需要修改的前提下就可以轻易被扩展。 是的，了解这一点非常重要。
有许多原则执导我们如何去架构一个系统、比如SRP原则（单一职责）。本质上还是维护来系统的可读性。一个类拥有多个行为在计算机上并没有差别。但是，如果一个类拥有了太多的行为，我们对它的修改就 变得很困难，不得不考虑一旦修改了它，会不会产生副作用。 同样我们还渴望，源代码的依赖方向和控制流的方向是相反的。一切都类型以接口的形式被声明和引用。比如Java 中@Autowride 更像是一个声明。我们并不关心注入的是什么，控制反转给上层，下层只需要关心具体的行文。
我需要一个可以打开门的钥匙，但并不去创造一个。甚至什么门也不关心，给我一把钥匙和一扇门，我可以打开它。 业务逻辑正式描述钥匙可以打开一扇门，这个过程。但其实并不关心谁制造的钥匙。
在以前的编程中，我们往往需要在源代码依赖方向new 一个钥匙。当这一切被反转后，我们就在也不需要担心这些细节了。
可测试的程序 Link to heading 可读性是如此的重要，以至于我们可以为了他牺牲性能（在某些情况下，可以将性能优化的代码进行伪装，可读性仍旧在）。 但是，可读性仅仅是人类协同的一个重要前提。一段程序必须同时拥有良好的可测试性。
测试似乎是可有可无的，没有测试的程序一样可以运行。但是测试是减少系统熵最有效的方式。系统架构无论多完美，在不同的开发者介入开发的时候，系统仍旧变得充满歧义和混乱。随着时间的推移， 这种情况只会越来越糟糕。因此正确的测试可以很好的减少这种熵。
为了让程序可测试，我们需要在编程的时候就了解到这一点，我提供的方法改如何测试？为此有时需要调整代码的结构、层次、依赖关系和参数。 这就是TDD测试驱动的核心。它推崇一种方式，在代码编写之前先完成测试用例。一旦这样做了，代码就会自然的组织在一起，一个微小的调整引发的bug将很快暴露出来。
测试并不是银弹，测试本身也会出错，测试并不保证程序的正确性，只能发现bug。
延迟选择的重要性 Link to heading 不论是架构师还是产品，在设计阶段最忌讳的是陷入细节的陷进。在一开始就因为要选择Mysql还是Postgresql而陷入争执是一件不明智的选择。</description>
    </item>
    
    <item>
      <title>春夏秋冬</title>
      <link>https://blog.okuer.com/posts/2020/2020-12-23-2020-ending/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.okuer.com/posts/2020/2020-12-23-2020-ending/</guid>
      <description>秋天该很好
你若尚在场
秋风即使带凉 亦漂亮
深秋中的你填密我梦想
就像落叶飞
轻敲我窗
冬天该很好
你若尚在场
天空多灰
我们亦放亮
一起坐坐谈谈来日动向
漠视外间低温
这样唱
能同途偶遇在这星球上
燃亮飘渺人生
我多么够运
无人如你逗留我思潮上
从没再疑问
这个世界好得很</description>
    </item>
    
    <item>
      <title>领域驱动设计的思考</title>
      <link>https://blog.okuer.com/posts/2021/2021-11-11-think-ddd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.okuer.com/posts/2021/2021-11-11-think-ddd/</guid>
      <description>本文思考了领域驱动究竟解决了什么事情
不妨让我们回到互联网初始的那个时间，那时候一切都简单朴素。我们编写简单的代码来控制一件事。
比如 if true then doThings 因为这样结构化的编程范式，我们写出了很长很长的代码，这些代码可以工作的很好。
我们有函数，它们可以将这些长长的代码进行分割，放在一个个文件里面。似乎没有任何问题。
时间慢慢的走，我们发现文件越来越多，我们引入来模块来将一些属于某个领域的文件集合打包。
让我们调整视角，看看模块内部的变化。
我们有了面向对象编程范式，大多数主流的编程语言都支持面向对象。如Java就是纯面向对象编程的。
面向对象提供很好的封装/多态/继承，让我们很容易编写出极度符合人类认知标准的代码。它将控制流从 文件的片段中移动到对象的行为上，我们称之为方法。
这是领域驱动的有力武器。
那么，领域驱动到底解决来什么问题呢？
领域驱动顾名思义就是通过领域设计来驱动开发，简单的来讲，就是在开发中引入领域概念来屏蔽调计算机领域和 业务领域的细节，让开发者和领域专家（任何对某个领域有丰富知识的人）协同开发的一种软件架构模式。
第一个原因 Link to heading 我们当今面临的业务复杂，开发人员往往不具备业务的领域知识，领域专家不懂技术，在沟通上往往会存在障碍。 因此领域驱动在一定程度上会强迫参与者进行知识的互相分享。
第二个原因 Link to heading 同时第二个重要的原因是，方便编写可维护性高的代码。 领域的知识往往是静态的。比如一个电商的下单流程，往往是固定的。 支付-检查锁定库存-生成订单。
引入领域驱动，可以更利于编写有业务价值的代码。
第三个原因 Link to heading 第三个重要的原因领域知识的沉淀，往往这些领域知识都是可以复用的。这意味着可以跨项目共享，减少开发的工作量。 领域天生具有极强的边界。所以可以拒绝不合理的系统改造。减少系统的熵。
在如今，团队协作/跨团队协作的背景下，领域驱动开发可以很好的在保证系统边界的前提下，拥有良好的代码维护性和扩展性，增强团队的领域知识。
当然，领域驱动是一种架构模式，跟语言无关，跟编程范式无关，这就意味着，如果不是面向对象语言，也可以做到领域驱动。
领域驱动有几个非常核心的概念：实体、聚合根、值对象、界定上下文、资源库、领域服务、工厂、领域事件。
这些概念是一种指导和约束，用来思考和构建领域知识。在使用领域驱动开发落地的时候，一个前提是沟通。 通过一些有意义的会议和讨论来得出一个系统的领域边界和知识。 实体就是一个个知识的代名词。
一些编程语言都支持属性访问，将实体的属性暴露出去不会有任何问题，但是，它并不代表领域知识。比如订单的一个价格的字段，直接抛出去而不用一个行为。
甚至在一定程度上更简洁。但是问题是，当通过某些订单拥有优惠券的时候，你必须得通知全部使用了这个字段的人，我引入了优惠券，你需要减去某个金额，
长时间下去，系统将难易维护。
内聚力是领域驱动的内功，如果理解领域知识使其高度内聚，是领域驱动设计的关键。
当然，领域驱动并不是银弹，我们需要考虑输出的产品是什么，有无团队协作，是否有领域专家，以及项目的其他因素。
并不是所有的产品都适合领域驱动设计。很多时候，我们系统更应该考虑如何模块化</description>
    </item>
    
  </channel>
</rss>
